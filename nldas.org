#+PROPERTY: session *R*
#+PROPERTY: results silent
#+PROPERTY: exports both

* Initialize the R session
  - Note taken on [2013-09-03 Tue 15:29]

#+BEGIN_SRC R
  library( XML)
  library( stringr)

  baseUrl <- "ftp://hydro1.sci.gsfc.nasa.gov/data/s4pa/NLDAS/NLDAS_FORA0125_H.002"
#+END_SRC

The base of the NLDAS downloads is =src_R[ :exports results]{ baseUrl}=.


* Download hourly data

The NLDAS archive begins at [1979-01-01 13:00].  Our experience is
that the most recent data available is four days before the present.
When starting with no data one should use the following date sequence
to specify the complete collection:

#+NAME: nldasDates
#+HEADER: :var fromYear=  1979
#+HEADER: :var fromMonth=    1 
#+HEADER: :var fromDay=      1 
#+HEADER: :var fromHour=    13
#+BEGIN_SRC R :results output silent
  nldasDates <-
    seq(
      from= ISOdate(
        year=  fromYear,
        month= fromMonth,
        day=   fromDay,
        hour=  fromHour),
      to= as.POSIXlt( Sys.Date() - 4),
      by= "hour")
#+END_SRC

Using the default arguments will populate the data as follows:


#+CALL: nldasDates()

#+RESULTS:

#+BEGIN_SRC R :results value
  head( nldasDates)
#+END_SRC

#+RESULTS:
| 1979-01-01 13:00:00 |
| 1979-01-01 14:00:00 |
| 1979-01-01 15:00:00 |
| 1979-01-01 16:00:00 |
| 1979-01-01 17:00:00 |
| 1979-01-01 18:00:00 |

#+BEGIN_SRC R :results replace
  tail( nldasDates)
#+END_SRC

#+RESULTS:
| 2013-08-31 19:00:00 |
| 2013-08-31 20:00:00 |
| 2013-08-31 21:00:00 |
| 2013-08-31 22:00:00 |
| 2013-08-31 23:00:00 |
| 2013-09-01 00:00:00 |

When updating an existing collection one should specify the download
date sequence as follows:

#+CALL: nldasDates( fromYear= 2013, fromMonth= 7, fromDay= 5, fromHour= 0)

#+RESULTS:

src_R{head(nldasDates)}

| 2013-07-05 00:00:00 |
| 2013-07-05 01:00:00 |
| 2013-07-05 02:00:00 |
| 2013-07-05 03:00:00 |
| 2013-07-05 04:00:00 |
| 2013-07-05 05:00:00 |

#+NAME: nldasDataUrls
#+BEGIN_SRC R :file data/nldasDataUrls :results replace
nldasDataUrls <-
  paste(
    baseUrl,
    format( nldasDates, "%Y/%j/NLDAS_FORA0125_H.A%Y%m%d.%H00.002.grb*"),
    ## format( nldasDates, "%Y/%j"),
    ## "*.grb*",
    sep= "/")
#+END_SRC

#+RESULTS: nldasDataUrls
[[file:data/nldasDataUrls]]

* Work out checksum verification using first URL

#+NAME: firstNldasDataUrl
#+BEGIN_SRC R
  head( nldasDataUrls, 1)
#+END_SRC

#+NAME: nldasWget
#+HEADER: :var url= firstNldasDataUrl()
#+BEGIN_SRC sh :session :results value replace
  wget \
      --no-host-directories \
      --cut-dirs=3 \
      --directory-prefix=data \
      --recursive \
      --quiet \
      --retry-connrefused \
      --timestamping \
      ${url}
#+END_SRC

Remember =--progress=dot:mega= in place of =--no-verbose=.


#+NAME: nldasWgetResult
#+HEADER: :var url= firstNldasDataUrl()
#+BEGIN_SRC sh :session :results value replace
    find data/$(echo -n ${url} | cut -d/ -f7-9) \
        -name $(echo -n ${url} | cut -d/ -f10) 
#+END_SRC

#+RESULTS: nldasWgetResult
| data/NLDAS_FORA0125_H.002/2013/186/NLDAS_FORA0125_H.A20130705.0000.002.grb     |
| data/NLDAS_FORA0125_H.002/2013/186/NLDAS_FORA0125_H.A20130705.0000.002.grb.xml |



* Download using GNU Parallel

#+BEGIN_SRC sh :session *nldas* :noweb yes
  parallel \
      --jobs 4 \
      -I '${url}' \
      --retries 10 \
      --keep-order \
      '<<nldasWget>>; \
      <<nldasWgetResult>>' \
      ::: $(tail -n 4 data/nldasDataUrls) \
      > data/parallelOutput
#+END_SRC

To read the entire file the =:::= argument above must be replaced by
=::::= (four colons) and a bare file name.


Incorporate the checksum verification

#+NAME: parallelWget
#+BEGIN_SRC sh :session :noweb yes :results replace
  parallel \
      --jobs 4 \
      -I '${url}' \
      --keep-order \
      --retries 10 \
      '<<nldasWget>>;
      <<nldasWgetResult>> | 
      tee data/parallelOutput |
      xargs scripts/nldasGrbChecksum.r' \
      ::: $(tail -n 4 data/nldasDataUrls)
#+END_SRC


#+RESULTS:

      :::: data/nldasDataUrls

* Download using GNU Parallel and SLURM

#+BEGIN_SRC sh :eval no :noweb yes :shebang #!/bin/sh :tangle scripts/parallelWget.sh
  module load parallel
  parallel \
      --jobs $SLURM_NTASKS \
      -I '${url}' \
      --keep-order \
      --retries 10 \
      'srun <<nldasWget>>;
      <<nldasWgetResult>> | 
      tee data/parallelOutput |
      xargs scripts/nldasGrbChecksum.r' \
      :::: data/nldasDataUrls \
#+END_SRC

#+BEGIN_SRC sh :session *nldas* :results replace
  sbatch \
      --ntasks 256 \
      scripts/parallelWget.sh
#+END_SRC

#+RESULTS:
|                               |
| > Submitted batch job 5431304 |


* Convert GRB metadata to CDO parameter table

#+BEGIN_SRC sh :session :results output verbatim replace
  ~/src/wgrib/wgrib -v data/NLDAS_FORA0125_H.002/1979/001/NLDAS_FORA0125_H.A19790101.1300.002.grb \
      | perl -lpe 's/ \[/:/; s/[\]\"]//g' \
      | cut -d: -f4,5,6,9,10
#+END_SRC

#+RESULTS:
#+begin_example
TMP:2 m above gnd:kpds=11,105,2:Temp.:K
SPFH:2 m above gnd:kpds=51,105,2:Specific humidity:kg/kg
PRES:sfc:kpds=1,1,0:Pressure:Pa
UGRD:10 m above gnd:kpds=33,105,10:u wind:m/s
VGRD:10 m above gnd:kpds=34,105,10:v wind:m/s
DLWRF:sfc:kpds=205,1,0:Downward longwave radiation flux:W/m^2
var153:sfc:kpds=153,1,0:undefined
CAPE:180-0 mb above gnd:kpds=157,116,46080:Convective available potential energy:J/Kg
PEVAP:sfc:kpds=228,1,0:Potential evaporation:Kg/m^2
APCP:sfc:kpds=61,1,0:Total precipitation:kg/m^2
DSWRF:sfc:kpds=204,1,0:Downward shortwave radiation flux:W/m^2
#+end_example

#+BEGIN_SRC sh :exports both :session :results output raw replace
  echo '|-' 
  echo '|variable|height|codes|description|units|'
  echo '|-' 
  ~/src/wgrib/wgrib -v data/NLDAS_FORA0125_H.002/1979/001/NLDAS_FORA0125_H.A19790101.1300.002.grb \
      | perl -lpe 's/ \[/:/; s/[\]\"]//g' \
      | cut -d: -f4,5,6,9,10 \
      | perl -lne 's/:/\|/g; print "|$_|"'
  echo '|-'
#+END_SRC

#+RESULTS:
|----------+--------------------+--------------------+---------------------------------------+--------|
| variable | height             | codes              | description                           | units  |
|----------+--------------------+--------------------+---------------------------------------+--------|
| TMP      | 2 m above gnd      | kpds=11,105,2      | Temp.                                 | K      |
| SPFH     | 2 m above gnd      | kpds=51,105,2      | Specific humidity                     | kg/kg  |
| PRES     | sfc                | kpds=1,1,0         | Pressure                              | Pa     |
| UGRD     | 10 m above gnd     | kpds=33,105,10     | u wind                                | m/s    |
| VGRD     | 10 m above gnd     | kpds=34,105,10     | v wind                                | m/s    |
| DLWRF    | sfc                | kpds=205,1,0       | Downward longwave radiation flux      | W/m^2  |
| var153   | sfc                | kpds=153,1,0       | undefined                             |        |
| CAPE     | 180-0 mb above gnd | kpds=157,116,46080 | Convective available potential energy | J/Kg   |
| PEVAP    | sfc                | kpds=228,1,0       | Potential evaporation                 | Kg/m^2 |
| APCP     | sfc                | kpds=61,1,0        | Total precipitation                   | kg/m^2 |
| DSWRF    | sfc                | kpds=204,1,0       | Downward shortwave radiation flux     | W/m^2  |
|----------+--------------------+--------------------+---------------------------------------+--------|

These correspond to the values we must give to CDO in a 'parameter table'.

#+BEGIN_SRC sh :session :results output verbatim replace
  cat data/cdoPartab
#+END_SRC

#+RESULTS:
#+begin_example
11	TMP	air temperature at 2m [K]
51	SPFH	specific humidity [kg/kg]
1	PRES	pressure [Pa]
33	UGRD	u wind [m/s]
34	VGRD	v wind [m/s]
205	DLWRF	downward longwave radiation flux [W/m^2]
153	var153	undefined
157	CAPE	convective available potential energy [J/kg]
228	PEVAP	potential evaporation [kg/m^2]
61	APCP	accumulated precipitation [mm]
204	DSWRF	downward shortwave radiation [W/m^2]
#+end_example

* Create a mask from the first day's data
  :PROPERTIES:
  :session:  *R*
  :END:

#+BEGIN_SRC sh :session :results silent
  mkdir data/output
#+END_SRC

#+BEGIN_SRC sh :session :results output replace
  gdalwarp -overwrite \
      -t_srs EPSG:4326 \
      -te -180 -90 180 90 \
      -tr 0.08333333 0.08333333 \
      -srcnodata 9999 \
      -dstnodata 9999 \
      data/NLDAS_FORA0125_H.002/1979/001/NLDAS_FORA0125_H.A19790101.1300.002.grb \
      data/output/nldasMask5minRaw.tif
#+END_SRC

#+RESULTS:
: 
: > > > > > > Creating output file that is 4320P x 2160L.
: Processing input file data/NLDAS_FORA0125_H.002/1979/001/NLDAS_FORA0125_H.A19790101.1300.002.grb.
: 0...10...20...30...40...50...60...70...80...90...100 - done.

#+BEGIN_SRC sh :session :results output
  gdalinfo data/output/nldasMask5minRaw.tif
#+END_SRC

#+RESULTS:
#+begin_example
Driver: GTiff/GeoTIFF
Files: data/output/nldasMask5minRaw.tif
Size is 4320, 2160
Coordinate System is:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0],
    UNIT["degree",0.0174532925199433],
    AUTHORITY["EPSG","4326"]]
Origin = (-180.000000000000000,90.000000000000000)
Pixel Size = (0.083333330000000,-0.083333330000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  INTERLEAVE=PIXEL
Corner Coordinates:
Upper Left  (-180.0000000,  90.0000000) (180d 0' 0.00"W, 90d 0' 0.00"N)
Lower Left  (-180.0000000, -89.9999928) (180d 0' 0.00"W, 89d59'59.97"S)
Upper Right ( 179.9999856,  90.0000000) (179d59'59.95"E, 90d 0' 0.00"N)
Lower Right ( 179.9999856, -89.9999928) (179d59'59.95"E, 89d59'59.97"S)
Center      (  -0.0000072,   0.0000036) (  0d 0' 0.03"W,  0d 0' 0.01"N)
Band 1 Block=4320x1 Type=Float64, ColorInterp=Gray
  NoData Value=9999
Band 2 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 3 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 4 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 5 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 6 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 7 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 8 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 9 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 10 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 11 Block=4320x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
#+end_example


#+BEGIN_SRC sh :session *nldas* :results output
  gdal_translate -ot Byte -b 1 \
      -a_nodata 255 \
      -scale \
      data/output/nldasMask5minRaw.tif \
      data/output/nldasMask5minByte.tif
#+END_SRC

#+RESULTS:
: 
: > > > Input file size is 4320, 2160
: 0...10...20...30...40...50...60...70...80...90...100 - done.

#+BEGIN_SRC sh :session :results output
  gdalinfo data/output/nldasMask5minByte.tif
#+END_SRC

#+RESULTS:
#+begin_example
Driver: GTiff/GeoTIFF
Files: data/output/nldasMask5minByte.tif
Size is 4320, 2160
Coordinate System is:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0],
    UNIT["degree",0.0174532925199433],
    AUTHORITY["EPSG","4326"]]
Origin = (-180.000000000000000,90.000000000000000)
Pixel Size = (0.083333330000000,-0.083333330000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  (-180.0000000,  90.0000000) (180d 0' 0.00"W, 90d 0' 0.00"N)
Lower Left  (-180.0000000, -89.9999928) (180d 0' 0.00"W, 89d59'59.97"S)
Upper Right ( 179.9999856,  90.0000000) (179d59'59.95"E, 90d 0' 0.00"N)
Lower Right ( 179.9999856, -89.9999928) (179d59'59.95"E, 89d59'59.97"S)
Center      (  -0.0000072,   0.0000036) (  0d 0' 0.03"W,  0d 0' 0.01"N)
Band 1 Block=4320x1 Type=Byte, ColorInterp=Gray
  NoData Value=255
#+end_example

* Convert byte values to a binary mask

** Scaling with gdal_translate doesn't work

#+BEGIN_SRC sh :session :results output
  gdal_translate \
      -scale 0 254 1 1 \
      data/output/nldasMask5minByte.tif \
      data/output/nldasMask5min.tif
#+END_SRC

#+RESULTS:
: Input file size is 4320, 2160
: 0...10...20...30...40...50...60...70...80...90...100 - done.


** Use R!

#+BEGIN_SRC R
  nldasMask5minByte <- setMinMax(
    raster( "data/output/nldasMask5minByte.tif"))
  
  nldasMask5min <-
    raster( nldasMask5minByte)
  NAvalue( nldasMask5min) <- 255
  
  nldasMask5min[] <-
    ifelse( !is.na( nldasMask5minByte[]), 1, NA)
  
  nldasMask5min <- writeRaster(
    nldasMask5min,
    filename= "data/output/nldasMask5min.tif",
    overwrite= TRUE,
    datatype= "LOG1S")
#+END_SRC

#+BEGIN_SRC sh :session :results output
  gdalinfo data/output/nldasMask5min.tif
#+END_SRC

#+RESULTS:
#+begin_example
Driver: GTiff/GeoTIFF
Files: data/output/nldasMask5min.tif
Size is 4320, 2160
Coordinate System is:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0],
    UNIT["degree",0.0174532925199433],
    AUTHORITY["EPSG","4326"]]
Origin = (-180.000000000000000,90.000000000000000)
Pixel Size = (0.083333330000000,-0.083333330000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  COMPRESSION=LZW
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  (-180.0000000,  90.0000000) (180d 0' 0.00"W, 90d 0' 0.00"N)
Lower Left  (-180.0000000, -89.9999928) (180d 0' 0.00"W, 89d59'59.97"S)
Upper Right ( 179.9999856,  90.0000000) (179d59'59.95"E, 90d 0' 0.00"N)
Lower Right ( 179.9999856, -89.9999928) (179d59'59.95"E, 89d59'59.97"S)
Center      (  -0.0000072,   0.0000036) (  0d 0' 0.03"W,  0d 0' 0.01"N)
Band 1 Block=4320x1 Type=Byte, ColorInterp=Gray
  Min=1.000 Max=1.000 
  Minimum=1.000, Maximum=1.000, Mean=1.000, StdDev=0.000
  NoData Value=255
  Metadata:
    STATISTICS_MAXIMUM=1
    STATISTICS_MEAN=1
    STATISTICS_MINIMUM=1
    STATISTICS_STDDEV=0
#+end_example


* Write out grid cells

#+BEGIN_SRC R :results silent
  nldasCells5min <- which( as.logical( nldasMask5min[]))
  
  cat(
    nldasCells5min,
    file= "data/output/nldasCells5min.txt",
    sep= "\n")
#+END_SRC


#+BEGIN_SRC sh :session :results output
  head data/output/nldasCells5min.txt
#+END_SRC

#+RESULTS:
#+begin_example
1918741
1918742
1918743
1918744
1918745
1918746
1918747
1918748
1918749
1918750
#+end_example


* Get the bounding box and write CDO grid description

#+BEGIN_SRC R
  nldasRegion <- trim( nldasMask5min, filename= "data/output/nldasRegion.tif")
#+END_SRC

#+BEGIN_SRC sh :session *nldas* :results output
  gdalwarp -overwrite \
      -t_srs EPSG:4326 \
      -tr 0.08333333 0.08333333 \
      -srcnodata 9999 \
      -dstnodata 9999 \
      data/NLDAS_FORA0125_H.002/1979/001/NLDAS_FORA0125_H.A19790101.1300.002.grb \
      data/output/nldasRegionRaw.tif
#+END_SRC

#+RESULTS:
: 
: > > > > > Creating output file that is 696P x 336L.
: Processing input file data/NLDAS_FORA0125_H.002/1979/001/NLDAS_FORA0125_H.A19790101.1300.002.grb.
: 0...10...20...30...40...50...60...70...80...90...100 - done.


#+BEGIN_SRC sh :session :results output
  gdalinfo data/output/nldasRegionRaw.tif
#+END_SRC

#+RESULTS:
#+begin_example
Driver: GTiff/GeoTIFF
Files: data/output/nldasRegionRaw.tif
Size is 696, 336
Coordinate System is:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0],
    UNIT["degree",0.0174532925199433],
    AUTHORITY["EPSG","4326"]]
Origin = (-125.000500000000002,53.000500000000002)
Pixel Size = (0.083333330000000,-0.083333330000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  INTERLEAVE=PIXEL
Corner Coordinates:
Upper Left  (-125.0005000,  53.0005000) (125d 0' 1.80"W, 53d 0' 1.80"N)
Lower Left  (-125.0005000,  25.0005011) (125d 0' 1.80"W, 25d 0' 1.80"N)
Upper Right ( -67.0005023,  53.0005000) ( 67d 0' 1.81"W, 53d 0' 1.80"N)
Lower Right ( -67.0005023,  25.0005011) ( 67d 0' 1.81"W, 25d 0' 1.80"N)
Center      ( -96.0005012,  39.0005006) ( 96d 0' 1.80"W, 39d 0' 1.80"N)
Band 1 Block=696x1 Type=Float64, ColorInterp=Gray
  NoData Value=9999
Band 2 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 3 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 4 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 5 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 6 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 7 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 8 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 9 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 10 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
Band 11 Block=696x1 Type=Float64, ColorInterp=Undefined
  NoData Value=9999
#+end_example


#+BEGIN_SRC sh :session *nldas* :results output
  gdal_translate -ot Byte -b 1 \
      -a_nodata 255 \
      -scale \
      data/output/nldasRegionRaw.tif \
      data/output/nldasRegionByte.tif
#+END_SRC

#+RESULTS:
: 
: > > > Input file size is 696, 336
: 0...10...20...30...40...50...60...70...80...90...100 - done.


#+BEGIN_SRC R :results silent
  
  griddesFormat <- 
    "gridtype = lonlat
  xsize    = %d
  ysize    = %d
  xfirst   = %13.8f
  xinc     = %13.8f
  yfirst   = %13.8f
  yinc     = %13.8f\n"
  
  griddes <- 
    sprintf(
      griddesFormat,
      ncol( nldasRegion),
      nrow( nldasRegion),
      xmin( nldasRegion),
      res( nldasRegion)[1],
      ymin( nldasRegion),
      res( nldasRegion)[2])
  
  cat( griddes, file= "scripts/nldas_5min.grid")
#+END_SRC

#+BEGIN_SRC R :results output
  cat( griddes)
#+END_SRC

#+RESULTS:
: 
: gridtype = lonlat
: xsize    = 696
: ysize    = 336
: xfirst   = -125.00000220
: xinc     =    0.08333333
: yfirst   =   25.00000260
: yinc     =    0.08333333


* Write makeflow file using Whisker templates			   :noexport:

This will not work until =whisker= supports lambdas.

#+BEGIN_SRC R :tangle tangle/Makeflow.R :tangle no
  library( whisker)
  library( plyr)
  
  nldasHours <- seq(
    from= ISOdatetime(
      year=  1979,
      month=    1,
      day=      1,
      hour=    13,
      min=      0,
      sec=      0,
      tz=   "GMT"),
    to= as.POSIXct( Sys.Date() - 4 -1/24),
    by= "hour")
  
  nldasDates <- seq(
    from= as.Date( nldasHours[ 1]),
    to=   as.Date( nldasHours[ length( nldasHours)]),
    by= "day")
#+END_SRC


#+NAME: hourlyTemplate
#+BEGIN_SRC mustache :eval no :tangle tangle/hourlyTemplate.mustache
  {{dataDir}}/{{Yj}}/NLDAS_FORA0125_H.A{{Ymd}}.{{H}}00.002.nc: {{dataDir}}/{{Yj}}/NLDAS_FORA0125_H.A{{Ymd}}.{{H}}00.002.grb {{cdoGrid}}
  {{cdoExecutable}} -f nc {{cdoRemapArgs}} {{dataDir}}/{{Yj}}/NLDAS_FORA0125_H.A{{Ymd}}.{{H}}00.002.grb {{dataDir}}/{{Yj}}/NLDAS_FORA0125_H.A{{Ymd}}.{{H}}00.002.nc
#+END_SRC

** TODO report R/noweb bug in pseudo-heredoc

#+BEGIN_SRC R :noweb yes :eval no
  template <- "<<hourlyTemplate>>"
#+END_SRC


** instead define snarf()

#+BEGIN_SRC R :tangle/Makeflow.R
  snarf <- function( fn) {
    readChar( fn, file.info( fn)$size)
  }
#+END_SRC

#+BEGIN_SRC R :tangle/Makeflow.R
  template <- snarf( "tangle/hourlyTemplate.mustache")
#+END_SRC

#+BEGIN_SRC R :noweb yes :tangle/Makeflow.R :results output append :file Makeflow
  headNldasHours <- head( nldasHours)
  headNldasDates <- head( nldasDates)
  
  template <- "{{dataDir}}/{{Yj}}/NLDAS_FORA0125_H.A{{Ymd}}.{{H}}00.002.nc:"
  
  
  getHourlyWhiskerData <- function( POSIXct, ...) {
    list(
      Yj= format( POSIXct, "%Y%j"),
      Ymd= format( POSIXct, "%Y%m%d"),
      H= format( POSIXct, "%H"),
      ...)
  }
  
  renderHourlyWhiskerData <- function( POSIXct, template, ...) {
    whisker.render( template, getHourlyWhiskerData( POSIXct, ...))
  }
  
  
  
  laply(
    .data= head( nldasHours),
    .fun= renderHourlyWhiskerData,
    template= template,
    dataDir= "data/NLDAS_FORA0125_H.002")
  
  
  dumpWhiskerOutput <- function( ..., file= "") {
    cat( renderHourlyWhiskerData( ...), file= file)
  }
  
  l_ply(
    .data= head( nldasHours),
    .fun= dumpWhiskerOutput,
    template= template,
    dataDir= "data/NLDAS_FORA0125_H.002")
  
#+END_SRC


** TODO help implement lambdas in =whisker=



* Combine annual files into all-time files

#+BEGIN_SRC sh
  set -x
  for var in hmax hmin pmin pmax precip pres solar spfh tmax tmin
  do 
      (find data/annual -name "${var}_*.nc"; \
          echo data/full/${var}_nldas_1979-2013.nc4) \
          | xargs cdo -O -f nc4 -z zip mergetime
  done
#+END_SRC 

This should perhaps be done on compute nodes but it really does not
cost much computatationally.


* Clean up intermediate data

#+BEGIN_SRC sh
  find data/NLDAS_FORA0125_H.002 -name "*.nc" -delete
#+END_SRC
